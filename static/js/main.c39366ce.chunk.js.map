{"version":3,"sources":["components/CreateForm/CreateForm.js","App.js","serviceWorker.js","index.js"],"names":["CreateForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fieldType","fielddName","handleInputChange","bind","assertThisInitialized","event","target","setState","defineProperty","name","value","input","react_default","a","createElement","TextField_default","multiline","type","FormControl_default","component","RadioGroup_default","FormControlLabel_default","control","Radio_default","label","Select_default","onChange","MenuItem_default","placeholder","Fab_default","color","aria-label","Add_default","PureComponent","App","create","goToCreatingForms","components_CreateForm_CreateForm","className","Button_default","variant","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c39366ce.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\n\nclass CreateForm extends PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      fieldType: 'input',\n      fielddName: '',\n    }\n\n    this.handleInputChange =  this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(event) {\n    const { target } = event;\n    this.setState({\n      [target.name]: target.value,\n    });\n  }\n\n  render() {\n    let input;\n    switch(this.state.fieldType) {\n      case 'input':\n        input = (<TextField/>);\n        break;\n      case 'textarea':\n        input = (<TextField multiline/>);\n        break;\n      case 'checkbox':\n        input = (<input type=\"checkbox\"/>);\n        break;\n      case 'radio':\n        input = ( \n          <FormControl component=\"fieldset\">\n            <RadioGroup>\n              <FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" />\n              <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\n              <FormControlLabel value=\"other\" control={<Radio />} label=\"Other\" />\n            </RadioGroup>\n          </FormControl>\n        );\n        break;\n      case 'select':\n        input = (<select/>);\n        break;\n      case 'file':\n        input = (<input type=\"file\"/>);\n        break;\n      default:\n        input = (<TextField/>);\n    }\n\n    return (\n      <div>\n        <section>\n          <Select\n            onChange={this.handleInputChange}\n            value={this.state.fieldType}\n            name=\"fieldType\"\n          >\n            <MenuItem value=\"input\">Input</MenuItem>\n            <MenuItem value=\"textarea\">Textarea</MenuItem>\n            <MenuItem value=\"checkbox\">Checkbox</MenuItem>\n            <MenuItem value=\"radio\">Radio</MenuItem>\n            <MenuItem value=\"select\">Select</MenuItem>\n            <MenuItem value=\"file\">File</MenuItem>\n          </Select>\n          <TextField\n            onChange={this.handleInputChange}\n            placeholder=\"filed name\"\n            name=\"fielddName\"\n          />\n          <Fab color=\"primary\" aria-label=\"Add\">\n            <AddIcon />\n          </Fab>\n        </section>\n        <form>\n          <h1>Preview</h1>\n          <label>\n            {this.state.fielddName}\n            {input}\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default CreateForm;\n","import React, { PureComponent } from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\n\nimport CreateForm from './components/CreateForm/CreateForm';\n\nclass App extends PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      create: false,\n    }\n    this.goToCreatingForms = this.goToCreatingForms.bind(this);\n  }\n\n  goToCreatingForms() {\n    this.setState({\n      create: true,\n    });\n  }\n\n  render() {\n    let create;\n    if (this.state.create) {\n      create = (<CreateForm/>);\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Button\n            variant=\"contained\"\n            onClick={this.goToCreatingForms}\n            color=\"primary\"\n          >Create new form</Button>\n          {create}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}