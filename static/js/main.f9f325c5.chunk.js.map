{"version":3,"sources":["store/index.js","components/FieldsPreview/FieldsPreview.js","components/CreateForm/CreateForm.js","App.js","serviceWorker.js","index.js"],"names":["store","createStore","combineReducers","state","reducers","window","__REDUX_DEVTOOLS_EXTENSION__","FieldsPreview","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fields","prevProps","props","newField","fieldsCopy","slice","push","type","id","Math","random","toString","substr","setState","event","target","defineProperty","name","value","bmb","map","field","react_default","a","createElement","Fragment","key","Grid_default","item","xs","TextField_default","input","multiline","FormControl_default","component","RadioGroup_default","FormControlLabel_default","control","Radio_default","label","getFieldByType","container","Component","CreateForm","fieldType","fielddName","handleInputChange","bind","assertThisInitialized","spacing","Select_default","onChange","MenuItem_default","Fab_default","color","aria-label","Add_default","components_FieldsPreview_FieldsPreview","PureComponent","App","create","goToCreatingForms","components_CreateForm_CreateForm","className","Button_default","variant","onClick","Boolean","location","hostname","match","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9f325c5.chunk.js","sourcesContent":["import { createStore, combineReducers } from 'redux';\nimport reducers from '../reducers/reducers.js';\n\nexport const store = createStore(\n  combineReducers({\n    state: reducers,\n  }),\n  window.__REDUX_DEVTOOLS_EXTENSION__  && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","import React, { Component } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\n\nimport Grid from '@material-ui/core/Grid';\n\nclass FieldsPreview extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      fields: [],\n    }\n\n    const data = [\n      {\n        type: 'input',\n        name: 'Do you have any questions?',\n        id: 1,\n      },\n      {\n        type: 'checkbox',\n        name: 'Ziz',\n        id: 2,\n      }\n    ];\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.newField !== prevProps.newField) {\n      const fieldsCopy = this.state.fields.slice();\n\n      fieldsCopy.push({\n        type: this.props.newField,\n        id: Math.random().toString(36).substr(2, 9),\n      });\n\n      this.setState({\n        fields: fieldsCopy,\n      });\n    }\n  }\n\n  handleInputChange(event) {\n    const { target } = event;\n    this.setState({\n      [target.name]: target.value,\n    });\n  }\n\n  render() {\n    function getFieldByType(type) {\n      let input;\n      switch(type) {\n        case 'input':\n          input = (<TextField/>);\n          break;\n        case 'textarea':\n          input = (<TextField multiline/>);\n          break;\n        case 'checkbox':\n          input = (<input type=\"checkbox\"/>);\n          break;\n        case 'radio':\n          input = (\n            <FormControl component=\"fieldset\">\n              <RadioGroup>\n                <FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" />\n                <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\n                <FormControlLabel value=\"other\" control={<Radio />} label=\"Other\" />\n              </RadioGroup>\n            </FormControl>\n          );\n          break;\n        case 'select':\n          input = (<select/>);\n          break;\n        case 'file':\n          input = (<input type=\"file\"/>);\n          break;\n        default:\n          input = (<TextField/>);\n      }\n      return input;\n    }\n\n    const bmb = this.state.fields.map((field) => \n      <React.Fragment key={field.id}>\n        <Grid item xs={2}>\n          <TextField value={field.name}/>\n        </Grid>\n        <Grid item xs={10} key={field.id}>\n          {getFieldByType(field.type)}\n        </Grid>\n      </React.Fragment>\n    );\n    return (\n      <Grid container>\n        {bmb}\n      </Grid>\n    )\n  }\n}\n\nexport default FieldsPreview;\n","import React, { PureComponent } from 'react';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\n\nimport Grid from '@material-ui/core/Grid';\n\nimport FieldsPreview from '../FieldsPreview/FieldsPreview';\n\nclass CreateForm extends PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      fieldType: 'input',\n      fielddName: '',\n    }\n\n    this.handleInputChange =  this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(event) {\n    const { target } = event;\n    this.setState({\n      [target.name]: target.value,\n    });\n  }\n\n  render() {\n    return (\n      <Grid container spacing={24}>\n        <Grid item xs={12}>\n          <Select\n            onChange={this.handleInputChange}\n            value={this.state.fieldType}\n            name=\"fieldType\"\n          >\n            <MenuItem value=\"input\">Input</MenuItem>\n            <MenuItem value=\"textarea\">Textarea</MenuItem>\n            <MenuItem value=\"checkbox\">Checkbox</MenuItem>\n            <MenuItem value=\"radio\">Radio</MenuItem>\n            <MenuItem value=\"select\">Select</MenuItem>\n            <MenuItem value=\"file\">File</MenuItem>\n          </Select>\n          <Fab color=\"primary\" aria-label=\"Add\">\n            <AddIcon />\n          </Fab>\n        </Grid>\n        <Grid item xs={12}>\n          <form>\n            <h1>Preview</h1>\n            <FieldsPreview newField={this.state.fieldType}/>\n          </form>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default CreateForm;\n","import React, { PureComponent } from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\n\nimport CreateForm from './components/CreateForm/CreateForm';\n\nclass App extends PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      create: false,\n    }\n    this.goToCreatingForms = this.goToCreatingForms.bind(this);\n  }\n\n  goToCreatingForms() {\n    this.setState({\n      create: true,\n    });\n  }\n\n  render() {\n    let create;\n    if (this.state.create) {\n      create = (<CreateForm/>);\n    }\n    return (\n      <div className=\"App\">\n        <Button\n          variant=\"contained\"\n          onClick={this.goToCreatingForms}\n          color=\"primary\"\n        >Create new form</Button>\n        {create}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './store/index';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}